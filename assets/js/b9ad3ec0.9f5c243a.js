"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6526],{23248:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"lab/00","title":"00 - Rust","description":"We will use the Rust programming language for the labs.","source":"@site/versioned_docs/version-fils_en/lab/00.md","sourceDirName":"lab","slug":"/lab/00","permalink":"/docs/fils_en/lab/00","draft":false,"unlisted":false,"editUrl":"https://github.com/UPB-FILS-MA/upb-fils-ma.github.io/edit/main/versioned_docs/version-fils_en/lab/00.md","tags":[],"version":"fils_en","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Lab","permalink":"/docs/fils_en/category/lab"},"next":{"title":"01 - Hardware Introduction","permalink":"/docs/fils_en/01"}}');var r=t(74848),i=t(28453);const a={sidebar_position:1},l="00 - Rust",o={},c=[{value:"Resources",id:"resources",level:2},{value:"Basic programming language concepts for Rust",id:"basic-programming-language-concepts-for-rust",level:2},{value:"Standard library",id:"standard-library",level:3},{value:"The <code>main</code> function",id:"the-main-function",level:3},{value:"Variables and mutability",id:"variables-and-mutability",level:3},{value:"Constants",id:"constants",level:3},{value:"Data Types",id:"data-types",level:3},{value:"Scalar types",id:"scalar-types",level:4},{value:"Compound types",id:"compound-types",level:4},{value:"Functions",id:"functions",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Declarations vs. expressions",id:"declarations-vs-expressions",level:4},{value:"Functions with return values",id:"functions-with-return-values",level:4},{value:"Control flow",id:"control-flow",level:3},{value:"if-else",id:"if-else",level:4},{value:"loop",id:"loop",level:4},{value:"while",id:"while",level:4},{value:"for",id:"for",level:4},{value:"Structures",id:"structures",level:3},{value:"Tuple structs",id:"tuple-structs",level:4},{value:"Enums",id:"enums",level:3},{value:"Option enum",id:"option-enum",level:4},{value:"Match",id:"match",level:4},{value:"String",id:"string",level:3},{value:"Creating a new String",id:"creating-a-new-string",level:4},{value:"Adding to a string",id:"adding-to-a-string",level:4},{value:"Iteration Methods on Strings",id:"iteration-methods-on-strings",level:4},{value:"Run the program",id:"run-the-program",level:3},{value:"Exercises",id:"exercises",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"00---rust",children:"00 - Rust"})}),"\n",(0,r.jsxs)(n.p,{children:["We will use the ",(0,r.jsx)(n.a,{href:"https://www.rust-lang.org/",children:"Rust"})," programming language for the labs."]}),"\n",(0,r.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The Rust Programming Language, Chapters ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch01-00-getting-started.html",children:"1"}),", ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html",children:"2"}),", ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"3"})," and ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch05-00-structs.html",children:"5"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://tourofrust.com",children:"Tour of Rust"})," step by step tutorial"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"basic-programming-language-concepts-for-rust",children:"Basic programming language concepts for Rust"}),"\n",(0,r.jsx)(n.h3,{id:"standard-library",children:"Standard library"}),"\n",(0,r.jsx)(n.p,{children:"The standard library is divided into three levels:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Level"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Needs"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/core/index.html",children:(0,r.jsx)(n.code,{children:"core"})})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Provides the required language elements that Rust needs for compiling, like the ",(0,r.jsx)(n.code,{children:"Display"})," and ",(0,r.jsx)(n.code,{children:"Debug"})," traits. Data can only be global items (stored in ",(0,r.jsx)(n.em,{children:".data"}),") or on the ",(0,r.jsx)(n.em,{children:"stack"}),"."]}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Hardware"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/alloc/index.html",children:(0,r.jsx)(n.code,{children:"alloc"})})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Provides everything from the ",(0,r.jsx)(n.code,{children:"core"})," level plus ",(0,r.jsx)(n.em,{children:"heap"})," allocated data structures like, ",(0,r.jsx)(n.code,{children:"Box"})," and ",(0,r.jsx)(n.code,{children:"Vec"}),". The developer has to provide a memory allocated, like ",(0,r.jsx)(n.a,{href:"https://docs.rs/embedded-alloc/latest/embedded_alloc/",children:"embedded_alloc"}),"."]}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Memory Allocator"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/std/index.html",children:(0,r.jsx)(n.code,{children:"std"})})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Provides everything from the ",(0,r.jsx)(n.code,{children:"alloc"})," level plus a lot of features that depend on the platform, including threads and I/O. This is the default level for Windows, Linux, macOS and similar OSes applications."]}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Operating System"})]})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This course will mostly use the ",(0,r.jsx)(n.code,{children:"core"})," level of the standard library, as the software has to run on a ",(0,r.jsx)(n.a,{href:"https://www.raspberrypi.com/products/raspberry-pi-pico/",children:"Raspberry Pi Pico"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["By default, Rust has a set of elements defined in the standard library that are imported into the program of each application. This set is called the ",(0,r.jsx)(n.em,{children:"prelude"}),", and you can look it up in the standard\nlibrary ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/std/prelude/index.html",children:"documentation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If a type you want to use is not in the prelude, you must bring that type into scope explicitly with a ",(0,r.jsx)(n.code,{children:"use"}),"\nstatement. Using the ",(0,r.jsx)(n.code,{children:"std::io"})," module gives you a number of useful features, including the ability to accept\nuser input."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use std::io; \n"})}),"\n",(0,r.jsxs)(n.h3,{id:"the-main-function",children:["The ",(0,r.jsx)(n.code,{children:"main"})," function"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"main"})," function is the entry point of our program."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    println!("Hello, world!");\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.code,{children:"println!"})," macro to print messages on the screen."]}),"\n",(0,r.jsxs)(n.p,{children:["To insert a placeholder in the ",(0,r.jsx)(n.code,{children:"println!"})," macro, use a ",(0,r.jsx)(n.em,{children:"pair of braces"})," ",(0,r.jsx)(n.code,{children:"{}"})," . We provide the variable name or\nexpression to replace the provided placeholder outside the string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n\n    let name = "Mary";\n    let age = 26;\n\n    println!("Hello, {}. You are {} years old", name, age);\n    // if the replacements are only variable, one can use the inline version\n    println!("Hello, {name}. You are {age} years old");\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"variables-and-mutability",children:"Variables and mutability"}),"\n",(0,r.jsxs)(n.p,{children:["We use the ",(0,r.jsx)(n.code,{children:"let"})," keyword to create a variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"    let a = 5;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["By default, in Rust, variables are ",(0,r.jsx)(n.strong,{children:"immutable"})," , meaning once a value is tied to a name, you cannot\nchange that value."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let x = 5;\n    println!("The value of x is: {x}");\n    x = 6;\n    println!("The value of x is: {x}");\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this case, we will get a compilation error because we are trying to modify the value of ",(0,r.jsx)(n.code,{children:"x"})," from ",(0,r.jsx)(n.code,{children:"5"})," to ",(0,r.jsx)(n.code,{children:"6"}),", but\n",(0,r.jsx)(n.code,{children:"x"})," is immutable, so we cannot make this modification."]}),"\n",(0,r.jsxs)(n.p,{children:["Although variables are immutable by default, you can make them ",(0,r.jsx)(n.strong,{children:"mutable"})," by adding ",(0,r.jsx)(n.code,{children:"mut"})," in front of the\nvariable name. Adding ",(0,r.jsx)(n.code,{children:"mut"})," also conveys intent to future readers of the code by indicating that other parts\nof the code will modify the value of this variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let mut x = 5;\n    println!("The value of x is: {x}");\n    x = 6;\n    println!("The value of x is: {x}");\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now the value of ",(0,r.jsx)(n.code,{children:"x"})," can become ",(0,r.jsx)(n.code,{children:"6"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"constants",children:"Constants"}),"\n",(0,r.jsxs)(n.p,{children:["Like immutable variables, constants are values that are tied to a name and ",(0,r.jsx)(n.strong,{children:"are not allowed to change"}),",\nbut there are some differences between constants and variables."]}),"\n",(0,r.jsxs)(n.p,{children:["First of all, you are not allowed to use ",(0,r.jsx)(n.code,{children:"mut"})," with constants. Constants are not only immutable by default,\nthey are always immutable. You declare constants using the ",(0,r.jsx)(n.code,{children:"const"})," keyword instead of the let keyword ."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"chapter 3"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h3,{id:"data-types",children:"Data Types"}),"\n",(0,r.jsx)(n.h4,{id:"scalar-types",children:"Scalar types"}),"\n",(0,r.jsx)(n.p,{children:"A scalar type represents a single value. Rust has four main scalar types: integers, floating point numbers,\nbooleans, and characters."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Integer"})," \u2192 Each variant can be signed or unsigned and has an explicit size."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let x: i8 = -2;\nlet y: u16 = 25;\n"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Length"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Signed"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Unsigned"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Java Equivalent"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"8-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i8"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u8"})}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"byte"}),"/ ",(0,r.jsx)(n.code,{children:"Byte"}),(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-java_unsigned",id:"user-content-fnref-java_unsigned","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"16-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i16"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u16"})}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"short"})," / ",(0,r.jsx)(n.code,{children:"Short"}),(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-java_unsigned",id:"user-content-fnref-java_unsigned-2","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"32-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i32"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u32"})}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"int"})," / ",(0,r.jsx)(n.code,{children:"Integer"}),(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-java_unsigned",id:"user-content-fnref-java_unsigned-3","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"64-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i64"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u64"})}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"long"})," / ",(0,r.jsx)(n.code,{children:"Long"}),(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-java_unsigned",id:"user-content-fnref-java_unsigned-4","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"128-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i128"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u128"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"N/A"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"arch"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"isize"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"usize"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"N/A"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Floating Point"})," \u2192 Rust's floating point types are ",(0,r.jsx)(n.code,{children:"f32"})," and ",(0,r.jsx)(n.code,{children:"f64"}),", which are 32-bit and 64-bit in size, respectively. The default type is ",(0,r.jsx)(n.code,{children:"f64"})," because on modern CPUs it is about the same speed as ",(0,r.jsx)(n.code,{children:"f32"})," but is capable of more precision. All floating point types are ",(0,r.jsx)(n.strong,{children:"signed"}),"."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Length"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Floating point"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Java Equivalent"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"32-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"f32"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"float"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"64-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"f64"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"double"})})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"fn main() {\n    let x = 2.0; // f64\n    let y1: f32 = 3.0; // f32\n    let y2 = 3.0f32; // f32\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Boolean"})," \u2192 Booleans are one byte in size. Boolean type in Rust is specified using bool."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let t = true;\nlet f: bool = false; // with explicit type annotation\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Character"})," \u2192 The Rust char type is the most primitive alphabetic type in the language."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let c = 'z';\nlet z: char = '\u2124'; // with explicit type annotation\nlet heart_eyed_cat = '\ud83d\ude3b';\n"})}),"\n",(0,r.jsx)(n.h4,{id:"compound-types",children:"Compound types"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tuple"})," \u2192 A tuple is a structure used for grouping a number of values \u200b\u200bwith a variety of types into a single compound type. Tuples have a ",(0,r.jsx)(n.strong,{children:"fixed"})," length  : once declared, their size cannot increase or decrease."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let tup: (i32, f64, u8) = (500, 6.4, 1);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Array"})," \u2192 Unlike a tuple, each element in an array must have the ",(0,r.jsx)(n.strong,{children:"same type"}),". Unlike arrays in some other languages, Rust arrays have a ",(0,r.jsx)(n.strong,{children:"fixed"})," length."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let a = [1, 2, 3, 4, 5];\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"chapter 3"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,r.jsxs)(n.p,{children:["We define a function in Rust by entering ",(0,r.jsx)(n.code,{children:"fn"})," keyword followed by a function name and a set of parentheses. Curly braces tell the compiler where the function body begins and ends."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    println!("Hello, world!");\n \n    another_function();\n}\n \nfn another_function() {\n    println!("Another function.");\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["We can define functions with parameters, which are special variables that are part of a function's signature. When a function has parameters, you can provide it with ",(0,r.jsx)(n.em,{children:"concrete values"})," \u200b\u200bfor those parameters, also called ",(0,r.jsx)(n.em,{children:"arguments"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    // the `another_function` function call has one single argument, the value 5.\n    another_function(5);\n}\n \n// the `another_function`function has one single parameter `x` of type `i32`\nfn another_function(x: i32) {\n    println!("The value of x is: {x}");\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsx)(n.p,{children:"In function signatures you must declare the type of each parameter!"})]}),"\n",(0,r.jsx)(n.h4,{id:"declarations-vs-expressions",children:"Declarations vs. expressions"}),"\n",(0,r.jsx)(n.p,{children:"Function bodies consist of a series of instructions optionally ending with an expression."}),"\n",(0,r.jsxs)(n.p,{children:["Declarations are ",(0,r.jsx)(n.strong,{children:"statements"})," that perform an action and do not return a value."]}),"\n",(0,r.jsx)(n.p,{children:"Expressions evaluate to a resulting value ."}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"chapter 3"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h4,{id:"functions-with-return-values",children:"Functions with return values"}),"\n",(0,r.jsxs)(n.p,{children:["Functions can return values \u200b\u200bto the code that calls them. We don't name the return values, but we must declare their type after ",(0,r.jsx)(n.em,{children:"an arrow"})," (",(0,r.jsx)(n.code,{children:"->"}),"). In Rust, the function's return value is synonymous with the value of ",(0,r.jsx)(n.strong,{children:"the final expression"})," in a function's body block. You can return earlier from a function by using the ",(0,r.jsx)(n.code,{children:"return"})," keyword and specifying a value, but most functions implicitly return the last expression."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn five() -> i32 {\n    5\n}\n \nfn main() {\n    let x = five();\n    println!("The value of x is: {x}");// "The value of x is: 5"\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"chapter 3"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h3,{id:"control-flow",children:"Control flow"}),"\n",(0,r.jsx)(n.h4,{id:"if-else",children:"if-else"}),"\n",(0,r.jsxs)(n.p,{children:["All ",(0,r.jsx)(n.code,{children:"if"})," expressions start with the ",(0,r.jsx)(n.code,{children:"if"})," keyword , followed by a condition. Optionally, we can also include an ",(0,r.jsx)(n.code,{children:"else"})," expression."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let number = 3;\n \n    if number < 5 {\n        println!("condition was true");\n    } else {\n        println!("condition was false");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can use multiple conditions by combining ",(0,r.jsx)(n.code,{children:"if"})," and ",(0,r.jsx)(n.code,{children:"else"})," in an ",(0,r.jsx)(n.code,{children:"else if"})," expression:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let number = 6;\n \n    if number % 4 == 0 {\n        println!("number is divisible by 4");\n    } else if number % 3 == 0 {\n        println!("number is divisible by 3");\n    } else if number % 2 == 0 {\n        println!("number is divisible by 2");\n    } else {\n        println!("number is not divisible by 4, 3, or 2");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Because ",(0,r.jsx)(n.code,{children:"if"})," is an expression, we can use it on ",(0,r.jsx)(n.strong,{children:"the right side"})," of a ",(0,r.jsx)(n.code,{children:"let"})," statement to assign the result to a variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let condition = true;\n    let number = if condition { 5 } else { 6 };\n \n    println!("The value of number is: {number}");//"The value of the number is 5"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"loop",children:"loop"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"loop"})," keyword tells Rust to run a block of code over and over forever or until you ",(0,r.jsx)(n.strong,{children:"explicitly"})," tell it to stop."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    loop {\n        println!("again!");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["One use of a ",(0,r.jsx)(n.code,{children:"loop"})," is to retry an operation that you know might fail, such as checking if a thread has finished its work. You may also need to pass the result of this operation out of the loop to the rest of your code. To do this, you can add the value you want to return after the ",(0,r.jsx)(n.code,{children:"break"})," expression you use to stop the loop; this value will be returned out of the loop so you can use it:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let mut counter = 0;\n \n    let result = loop {\n        counter += 1;\n \n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n \n    println!("The result is {result}");\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"while",children:"while"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let mut number = 3;\n \n    while number != 0 {\n        println!("{number}!");\n \n        number -= 1;\n    }\n \n    println!("LIFTOFF!!!");\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"for",children:"for"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let a = [10, 20, 30, 40, 50];\n \n    for element in a {\n        println!("the value is: {element}");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"chapter 3"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h3,{id:"structures",children:"Structures"}),"\n",(0,r.jsxs)(n.p,{children:["Structs are similar to tuples, in that they both contain multiple related values . Like tuples, pieces of a structure can be of different types. Unlike tuples, in a structure you ",(0,r.jsx)(n.strong,{children:"will name"})," each piece of data so that the meaning of the values \u200b\u200bis clear."]}),"\n",(0,r.jsxs)(n.p,{children:["To define a structure, we enter the ",(0,r.jsx)(n.code,{children:"struct"})," keyword and name the entire structure. The name of a structure should describe the meaning of the data elements grouped together. Then, within curly brackets, we define the names and types of the data, which we call ",(0,r.jsx)(n.strong,{children:"fields"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"struct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To use a structure after having defined it, we create an ",(0,r.jsx)(n.strong,{children:"instance"})," of this structure by specifying concrete values \u200b\u200bfor each of the fields. We create a ",(0,r.jsx)(n.strong,{children:"stack allocated"})," instance by specifying the structure name , then add curly braces containing ",(0,r.jsx)(n.code,{children:"key:value"})," pairs , where the keys are the field names and the values \u200b\u200bare the data we want to store in those fields."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let user1 = User {\n        active: true,\n        username: String::from("someusername123"),\n        email: String::from("someone@example.com"),\n        sign_in_count: 1,\n    };\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"To access a certain member of the structure we use this syntax:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let mut user1 = User {\n        active: true,\n        username: String::from("someusername123"),\n        email: String::from("someone@example.com"),\n        sign_in_count: 1,\n    };\n \n    user1.email = String::from("anotheremail@example.com")\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["Note that the entire instance must be ",(0,r.jsx)(n.strong,{children:"editable"}),"  ; Rust ",(0,r.jsx)(n.strong,{children:"doesn't allow us"})," to mark only certain fields as mutable!"]})]}),"\n",(0,r.jsx)(n.p,{children:"As with any expression, we can construct a new instance of the structure as the last expression in the function body to implicitly return this new instance."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"fn build_user(email: String, username: String) -> User {\n    User {\n        active: true,\n        username: username,\n        email: email,\n        sign_in_count: 1,\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If we try to print an instance of ",(0,r.jsx)(n.code,{children:"User"})," using the ",(0,r.jsx)(n.code,{children:"println!"})," macro as we have seen early, it will not work."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let user1 = User {\n        active: true,\n        username: String::from("someusername123"),\n        email: String::from("someone@example.com"),\n        sign_in_count: 1,\n    };\n \n    println!("User is: {}", user1);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"We will get the following error message:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"error[E0277]: `User` doesn't implement `std::fmt::Display`\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In order to print a structure, we need to use ",(0,r.jsx)(n.code,{children:"{:?}"})," instead of ",(0,r.jsx)(n.code,{children:"{}"}),", and implement ",(0,r.jsx)(n.code,{children:"Debug"})," trait for the structure with ",(0,r.jsx)(n.code,{children:"#[derive(Debug)]"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.code,{children:"Debug"})," trait to print structures, arrays, enums or any other type that doesn't implement ",(0,r.jsx)(n.code,{children:"Display"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug)]\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn main() {\n    let user1 = User {\n        active: true,\n        username: String::from("someusername123"),\n        email: String::from("someone@example.com"),\n        sign_in_count: 1,\n    };\n \n    println!("User is: {:?}", user1);\n\n    let x = [1, 2, 3];\n\n    println!("Integer slice: {:?}", x);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'User is: User { active: true, username: "someusername123", email: "someone@example.com", sign_in_count: 1 }\nInteger slice: [1, 2, 3]\n'})}),"\n",(0,r.jsx)(n.h4,{id:"tuple-structs",children:"Tuple structs"}),"\n",(0,r.jsxs)(n.p,{children:["Rust also supports structures that resemble tuples, called ",(0,r.jsx)(n.strong,{children:"tuple structs"})," . Tuple structures have the additional meaning provided by the structure name but do not have names associated with their fields; instead, they just have the field types. Tuple structures are useful when you want to name the entire tuple and make it a different type from other tuples, and when naming each field as in a regular structure would be wordy or redundant."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"struct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n \nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch05-00-structs.html",children:"chapter 5"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,r.jsxs)(n.p,{children:["Enumerations, also referred as ",(0,r.jsx)(n.code,{children:"enums"}),", allow you to define a type by enumerating its possible variants.",(0,r.jsx)(n.br,{}),"\n","How to define an ",(0,r.jsx)(n.code,{children:"enum"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"enum IpAddrKind {\n    V4,\n    V6,\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"option-enum",children:"Option enum"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Option"})," is another ",(0,r.jsx)(n.code,{children:"enum"})," defined by the standard library. The ",(0,r.jsx)(n.code,{children:"Option"})," type encodes the very common scenario in which a value can be something or nothing."]}),"\n",(0,r.jsxs)(n.p,{children:["Rust ",(0,r.jsx)(n.strong,{children:"doesn't have the null"})," functionality that many other languages \u200b\u200bhave. Null is a value that means there is no value here. In languages \u200b\u200bwith null, variables can always be in one of two states: null or non-null."]}),"\n",(0,r.jsxs)(n.p,{children:["As such, Rust does not have null values, but it does have an enumeration that can encode the concept of a value being present or absent. This enumeration is ",(0,r.jsx)(n.code,{children:"Option<T>"}),", and it is defined by the standard library as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"enum Option<T> {\n    None,\n    Some(T),\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For now, all you need to know is that ",(0,r.jsx)(n.code,{children:"<T>"})," means that the Some variant of the Option enumeration can contain data of ",(0,r.jsx)(n.strong,{children:"any type"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"    let some_number = Some(5);\n    let some_char = Some('e');\n \n    let absent_number: Option<i32> = None;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The type of ",(0,r.jsx)(n.code,{children:"some_number"})," is ",(0,r.jsx)(n.code,{children:"Option<i32>"}),". The type of ",(0,r.jsx)(n.code,{children:"some_char"})," is ",(0,r.jsx)(n.code,{children:"Option<char>"}),", which is a different type."]}),"\n",(0,r.jsxs)(n.p,{children:["When we have a ",(0,r.jsx)(n.code,{children:"Some"})," value, we know that a value is present and that the value is contained in ",(0,r.jsx)(n.code,{children:"Some"}),". When we have a ",(0,r.jsx)(n.code,{children:"None"})," value, it kind of means the same thing as null: we don't have a valid value."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You must convert an ",(0,r.jsx)(n.code,{children:"Option<T>"})," to a ",(0,r.jsx)(n.code,{children:"T"})," before you can perform ",(0,r.jsx)(n.code,{children:"T"})," operations with it."]})}),"\n",(0,r.jsx)(n.h4,{id:"match",children:"Match"}),"\n",(0,r.jsxs)(n.p,{children:["Rust has an extremely powerful control flow construct called ",(0,r.jsx)(n.code,{children:"match"})," that allows you to compare a value against a series of patterns and then run code based on which pattern matches. Patterns can consist of literal values, variable names, wildcards, and many other things."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"enum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n \nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter => 25,\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"When the match expression runs, it compares the resulting value to the model for each arm, in order. If a pattern matches the value, the code associated with that pattern is executed. If this pattern does not match the value, execution continues to the next arm."}),"\n",(0,r.jsxs)(n.p,{children:["The code associated with each arm is an ",(0,r.jsx)(n.strong,{children:"expression"})," , and the resulting value of the expression in the corresponding arm is the ",(0,r.jsx)(n.strong,{children:"returned value"})," for the entire matching expression."]}),"\n",(0,r.jsxs)(n.p,{children:["In the previous section, we wanted to extract the internal ",(0,r.jsx)(n.code,{children:"T"})," value of the Some case when using ",(0,r.jsx)(n.code,{children:"Option<T>"}),"; we can also handle ",(0,r.jsx)(n.code,{children:"Option<T>"})," using match , like we did with the ",(0,r.jsx)(n.code,{children:"Coin"})," enumeration! Instead of comparing parts, we will compare variants of ",(0,r.jsx)(n.code,{children:"Option<T>"}),", but the way the ",(0,r.jsx)(n.code,{children:"match"})," expression works remains the same."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"    fn get_option(x: Option<i32>) -> Option<i32> {\n        match x {\n            None => None,\n            Some(i) => Some(i),\n        }\n    }\n \n    let five = Some(5);\n    let six = get_option(five);\n    let none = get_option(None);\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch06-00-enums.html",children:"chapter 6"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,r.jsxs)(n.p,{children:["Rust has only one type of string in the core language, which is the string slice ",(0,r.jsx)(n.code,{children:"str"})," which is usually seen in its borrowed form ",(0,r.jsx)(n.code,{children:"&str"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"String"})," type , which is provided by the Rust standard library rather than encoded in the main language, is a scalable, mutable, and owned UTF-8 encoded string type ."]}),"\n",(0,r.jsx)(n.h4,{id:"creating-a-new-string",children:"Creating a new String"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"    let mut s = String::new();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This line creates a new empty string called ",(0,r.jsx)(n.code,{children:"s"}),", which we can then load data into."]}),"\n",(0,r.jsxs)(n.p,{children:["We can use the ",(0,r.jsx)(n.code,{children:"String::from"})," function or the ",(0,r.jsx)(n.code,{children:"to_string"})," function to create a string from a string literal:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'    let s = String::from("initial contents");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'let data = "initial contents";\n \n    let s = data.to_string();\n \n    // the method also works on a literal directly:\n    let s = "initial contents".to_string();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"adding-to-a-string",children:"Adding to a string"}),"\n",(0,r.jsxs)(n.p,{children:["We can expand a string using the ",(0,r.jsx)(n.code,{children:"push_str"})," method to add a string slice."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'let mut s = String::from("foo");\ns.push_str("bar");\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The push"})," method takes ",(0,r.jsx)(n.strong,{children:"a single character"})," as a parameter and adds it to the string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"    let mut s = String::from(\"lo\");\n    s.push('l');\n"})}),"\n",(0,r.jsx)(n.h4,{id:"iteration-methods-on-strings",children:"Iteration Methods on Strings"}),"\n",(0,r.jsxs)(n.p,{children:["The best way to operate on pieces of strings is to be explicit about whether you want characters or bytes. For individual Unicode scalar values, use the ",(0,r.jsx)(n.code,{children:"chars"})," method ."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'for c in "\u0417\u0434".chars() {\n    println!("{c}");\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"run-the-program",children:"Run the program"}),"\n",(0,r.jsx)(n.p,{children:"In order to run the program we may be anywhere in the crate's folder and execute the command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo run\n"})}),"\n",(0,r.jsx)(n.h2,{id:"exercises",children:"Exercises"}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["If you don't have Rust installed, you can use ",(0,r.jsx)(n.a,{href:"https://play.rust-lang.org/",children:"Rust Playground"})," to solve the topics."]})]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Before tackling the exercises, take a look and cover chapters ",(0,r.jsx)(n.a,{href:"https://tourofrust.com/chapter_1_en.html",children:"1"}),", ",(0,r.jsx)(n.a,{href:"https://tourofrust.com/chapter_2_en.html",children:"2"})," and ",(0,r.jsx)(n.a,{href:"https://tourofrust.com/chapter_3_en.html",children:"3"})," of ",(0,r.jsx)(n.a,{href:"https://tourofrust.com/",children:"Tour of Rust"})," tutorials."]})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Write a program that prints your name (",(0,r.jsx)(n.strong,{children:"1p"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Define two variables and assign them a numerical value. Shows the maximum value between the two without using a temporary variable (",(0,r.jsx)(n.strong,{children:"1p"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Write a function that checks if a number is divisible by n (",(0,r.jsx)(n.strong,{children:"1p"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Define an array of numbers and write code to display the maximum value (",(0,r.jsx)(n.strong,{children:"1p"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Define a structure called Computer that defines the brand, processor name, and memory size of a computer (",(0,r.jsx)(n.strong,{children:"2p"}),").",(0,r.jsx)(n.br,{}),"\n","a. Write an associated (static) function called new that creates an instance of the structure.",(0,r.jsx)(n.br,{}),"\n","b. Write a method called display that prints all the information."]}),"\n",(0,r.jsxs)(n.li,{children:["Define an array with elements of type Computer. Write a program that displays a menu with the following options (",(0,r.jsx)(n.strong,{children:"2p"}),"):",(0,r.jsx)(n.br,{}),"\n","a. print all computers",(0,r.jsx)(n.br,{}),"\n","b. print the computer with the largest amount of memory",(0,r.jsx)(n.br,{}),"\n","Read the keyboard keys and perform the selected option until you read something different from a and b."]}),"\n"]}),"\n","\n",(0,r.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,r.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{id:"user-content-fn-java_unsigned",children:["\n",(0,r.jsxs)(n.p,{children:["Starting with Java 8, the ",(0,r.jsx)(n.code,{children:"Number"})," classes have some helper methods, like ",(0,r.jsx)(n.code,{children:"compareUnsigned"})," and ",(0,r.jsx)(n.code,{children:"toUnsigned..."})," that allow the usage and manipulation of unsigned numbers. ",(0,r.jsx)(n.a,{href:"#user-content-fnref-java_unsigned","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})," ",(0,r.jsxs)(n.a,{href:"#user-content-fnref-java_unsigned-2","data-footnote-backref":"","aria-label":"Back to reference 1-2",className:"data-footnote-backref",children:["\u21a9",(0,r.jsx)(n.sup,{children:"2"})]})," ",(0,r.jsxs)(n.a,{href:"#user-content-fnref-java_unsigned-3","data-footnote-backref":"","aria-label":"Back to reference 1-3",className:"data-footnote-backref",children:["\u21a9",(0,r.jsx)(n.sup,{children:"3"})]})," ",(0,r.jsxs)(n.a,{href:"#user-content-fnref-java_unsigned-4","data-footnote-backref":"","aria-label":"Back to reference 1-4",className:"data-footnote-backref",children:["\u21a9",(0,r.jsx)(n.sup,{children:"4"})]})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);