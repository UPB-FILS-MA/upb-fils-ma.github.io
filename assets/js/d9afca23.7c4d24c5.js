"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2342],{7703:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"project/2024/mihai.pasaroiu/index","title":"Music Player","description":"Compact music player with microSD input, outputting to a speaker, featuring controls for play, pause, skip, and volume.","source":"@site/versioned_docs/version-fils_en/project/2024/mihai.pasaroiu/index.md","sourceDirName":"project/2024/mihai.pasaroiu","slug":"/project/2024/mihai.pasaroiu/","permalink":"/docs/fils_en/project/2024/mihai.pasaroiu/","draft":false,"unlisted":false,"editUrl":"https://github.com/UPB-PMRust/upb-pmrust.github.io/edit/main/website/versioned_docs/version-fils_en/project/2024/mihai.pasaroiu/index.md","tags":[],"version":"fils_en","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"RC Car","permalink":"/docs/fils_en/project/2024/mihai.georgescu2508/"},"next":{"title":"Music Player","permalink":"/docs/fils_en/project/2024/mihai.popescu/"}}');var s=i(74848),n=i(28453);const a={},d="Music Player",o={},c=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Log",id:"log",level:2},{value:"Week 6 - 12 May",id:"week-6---12-may",level:3},{value:"Week 7 - 19 May",id:"week-7---19-may",level:3},{value:"Week 20 - 26 May",id:"week-20---26-may",level:3},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics",level:3},{value:"Bill of Materials",id:"bill-of-materials",level:3},{value:"Software",id:"software",level:2},{value:"Links",id:"links",level:2}];function l(e){const t={a:"a",admonition:"admonition",br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"music-player",children:"Music Player"})}),"\n",(0,s.jsx)(t.p,{children:"Compact music player with microSD input, outputting to a speaker, featuring controls for play, pause, skip, and volume."}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsx)(t.mdxAdmonitionTitle,{}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Author"}),": Pasaroiu Mihai Octavian ",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.strong,{children:"GitHub Project Link"}),": ",(0,s.jsx)(t.a,{href:"https://github.com/UPB-FILS-MA/project-12mihai05.git",children:"https://github.com/UPB-FILS-MA/project-12mihai05.git"})]})]}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(t.p,{children:"This project is a compact music player built with a Raspberry Pi Pico W and programmed in Rust. It uses an SPI-connected microSD module to read songs, playing them through a speaker with an amplifier for clear audio output. The music will be outputted as PWM through a speaker. The user interface consists of push buttons for basic controls (next song, previous song, and play/pause), a potentiometer for smooth volume adjustment, and an I2C LCD screen that displays the current song's title.\nAdditionally, a set of PWM-controlled LEDs offers a dynamic visual representation of the music's intensity, with brightness varying based on the PWM duty cycle of the audio output to the speaker."}),"\n",(0,s.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,s.jsx)(t.p,{children:"Building a music player with a Raspberry Pi Pico W using Rust allowed me to work on a project that I could personally enjoy, while also learning valuable skills in microcontroller programming and hardware integration. I like to listen to music, and it seemed interesting to create a project that combines technology with something I love. Plus, it's a great way to make something cool that I can show off to my friends."}),"\n",(0,s.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Architecture Diagram",src:i(90742).A+"",width:"862",height:"490"})}),"\n",(0,s.jsx)(t.h2,{id:"log",children:"Log"}),"\n",(0,s.jsx)(t.h3,{id:"week-6---12-may",children:"Week 6 - 12 May"}),"\n",(0,s.jsx)(t.p,{children:"Make the hardware part and work for the software."}),"\n",(0,s.jsx)(t.h3,{id:"week-7---19-may",children:"Week 7 - 19 May"}),"\n",(0,s.jsx)(t.p,{children:"Continue developing and debugging software."}),"\n",(0,s.jsx)(t.h3,{id:"week-20---26-may",children:"Week 20 - 26 May"}),"\n",(0,s.jsx)(t.p,{children:"Finished the software and made the case for the project."}),"\n",(0,s.jsx)(t.h2,{id:"hardware",children:"Hardware"}),"\n",(0,s.jsx)(t.p,{children:"This project utilizes a Raspberry Pi Pico to facilitate digital audio playback from a 32GB microSD card formatted in FAT32, interfaced via SPI protocol. The audio output is delivered through a 1W speaker powered by a PAM8403 Class D Stereo Mini Amplifier, enhanced by an RC filter comprising a 680-ohm resistor and a 10nF capacitor, which filters frequencies above 23.4kHz. Visual augmentation is achieved through four LEDs, controlled by PWM signals that vary in intensity corresponding to the audio output's duty cycle, providing a dynamic representation of sound intensity. User interaction is managed through a 1602 LCD display, operating on the I2C protocol, which displays the current song title. The system also incorporates three push-buttons connected to the microcontroller's GPIO pins with 10k-ohm pull-up resistors, assigned to play/pause functionality and navigation between tracks. Additionally, a potentiometer is integrated for volume control, offering user-adjustable audio output levels."}),"\n",(0,s.jsx)(t.h3,{id:"schematics",children:"Schematics"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.img,{alt:"kicad",src:i(46524).A+"",width:"997",height:"513"}),"\n",(0,s.jsx)(t.img,{alt:"hardware image 1",src:i(46722).A+"",width:"1600",height:"900"}),"\n",(0,s.jsx)(t.img,{alt:"hardware image 2",src:i(15949).A+"",width:"1824",height:"1026"}),"\n",(0,s.jsx)(t.img,{alt:"hardware image 3",src:i(71056).A+"",width:"1500",height:"2000"})]}),"\n",(0,s.jsx)(t.h3,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Device"}),(0,s.jsx)(t.th,{children:"Usage"}),(0,s.jsx)(t.th,{children:"Price"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html",children:"Rapspberry Pi Pico W"})}),(0,s.jsx)(t.td,{children:"The microcontroller"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/12394-raspberry-pi-pico-w.html",children:"35 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.waveshare.com/datasheet/LCD_en_PDF/LCD1602.pdf",children:"1602 LCD"})}),(0,s.jsx)(t.td,{children:"LCD Display"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/optoelectronice-lcd-uri/2894-lcd-cu-interfata-i2c-si-backlight-albastru.html?search_query=LCD+1602+cu+Interfata+I2C+si+Backlight+Albastru&results=2",children:"16.34 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.mouser.com/datasheet/2/115/PAM8403-247318.pdf",children:"Amplifier"})}),(0,s.jsx)(t.td,{children:"Boosts audio output"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/audio-amplificatoare-audio/165-amplificator-in-miniatura.html",children:"3.99 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Buttons"}),(0,s.jsx)(t.td,{children:"Play/Pause and previous/next song"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/butoane-i-comutatoare/1119-buton-6x6x6.html",children:"2.16 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Different color leds"}),(0,s.jsx)(t.td,{children:"Visual representation of the music's intensity"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/optoelectronice-led-uri/696-led-rou-de-3-mm-cu-lentile-difuze.html?search_query=LED+Ro%C8%99u+de+3+mm+cu+Lentile+Difuze&results=2",children:"6 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Wires"}),(0,s.jsx)(t.td,{children:"Connects electronic components"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/fire-fire-mufate/12-set-de-cabluri-pentru-breadboard.html",children:"13.79 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Breadboard"}),(0,s.jsx)(t.td,{children:"Component integration"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/fire-fire-mufate/12-set-de-cabluri-pentru-breadboard.html",children:"9.98 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Potentiometer"}),(0,s.jsx)(t.td,{children:"Adjust volume"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/componente-electronice-potentiometre/901-rezistor-variabil-10k-wh148.html?search_query=Rezistor+Variabil+10k+WH148+%28Poten%C8%9Biometru%29&results=2",children:"2.36 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Speaker"}),(0,s.jsx)(t.td,{children:"Outputs the song"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/audio-difuzoare/2147-difuzor-de-1-w.html?search_query=Difuzor+de+1+W&results=100",children:"4.27 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Resistors"}),(0,s.jsx)(t.td,{children:"Limits current flow"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/componente-electronice-rezistoare/33-rezistoare-set.html",children:"14.99 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MicroSD Card Module"}),(0,s.jsx)(t.td,{children:"Reads the song from the microSD"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/componente-electronice-rezistoare/33-rezistoare-set.html",children:"4.39 RON"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Capacitor"}),(0,s.jsx)(t.td,{children:"Low-pass filter(RC)"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/capacitors/2749-capacitor-10nf.html",children:"0.39 RON"})})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"software",children:"Software"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Library"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Usage"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/rust-embedded-community/embedded-sdmmc-rs",children:"embedded-sdmmc-rs"})}),(0,s.jsx)(t.td,{children:"MicroSD card management"}),(0,s.jsx)(t.td,{children:"Used for reading the files from microSD"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/mjhouse/ag-lcd",children:"ag-lcd"})}),(0,s.jsx)(t.td,{children:"LCD display driver"}),(0,s.jsx)(t.td,{children:"Used for displaying the name of the song playing"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/rahix/port-expander",children:"port-expander"})}),(0,s.jsx)(t.td,{children:"Management and use of I/O expander chips"}),(0,s.jsx)(t.td,{children:"Manage the PCF8574 I/O expander for controlling LCD display via the I2C bus"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/rust-embedded/cortex-m",children:"cortex-m"})}),(0,s.jsx)(t.td,{children:"Provides low-level APIs for ARM Cortex-M processors"}),(0,s.jsx)(t.td,{children:"Interrupt handling and system control"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/embassy-rs/embassy/tree/main/embassy-executor",children:"embassy-executor"})}),(0,s.jsx)(t.td,{children:"Manages asynchronous tasks"}),(0,s.jsx)(t.td,{children:"Handles logging over USB in an asynchronous manner"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/embassy-rs/embassy/tree/main/embassy-sync",children:"embassy-sync"})}),(0,s.jsx)(t.td,{children:"Provides synchronization primitives for use in async tasks"}),(0,s.jsx)(t.td,{children:"Used to protect shared resources using mutexes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/embassy-rs/embassy/tree/main/embassy-time",children:"embassy-time"})}),(0,s.jsx)(t.td,{children:"Provides time-related utilities"}),(0,s.jsx)(t.td,{children:"Managing delays and scheduling tasks"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/rust-embedded/heapless",children:"heapless"})}),(0,s.jsx)(t.td,{children:"Enables the use of fixed-size data structures that do not require heap memory"}),(0,s.jsx)(t.td,{children:"Managing strings and vectors that have a fixed capacity"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/rust-lang/log",children:"log"})}),(0,s.jsx)(t.td,{children:"Facilitates logging"}),(0,s.jsx)(t.td,{children:"Output debug and information messages"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://gitlab.com/teskje/microfft-rs",children:"microfft"})}),(0,s.jsx)(t.td,{children:"Provides fast Fourier transform (FFT) calculations"}),(0,s.jsx)(t.td,{children:"Performing FFT on audio data to analyze frequencies and amplitudes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/Lokathor/bytemuck",children:"bytemuck"})}),(0,s.jsx)(t.td,{children:"Offers safe casting between data types"}),(0,s.jsx)(t.td,{children:"Used to safely cast slices of bytes to slices of other types"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://gitlab.com/tspiteri/fixed",children:"fixed"})}),(0,s.jsx)(t.td,{children:"Implements fixed-point arithmetic types"}),(0,s.jsx)(t.td,{children:"Transform bytes in FixedU16"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"links",children:"Links"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.youtube.com/watch?v=JrYT7aJnP_I",children:"How to connect SD Card to Raspberry Pi Pico using SPI"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.tomshardware.com/how-to/lcd-display-raspberry-pi-pico",children:"How to use the LCD using I2C"})}),"\n",(0,s.jsxs)(t.li,{children:["Check and search for dependecies: ",(0,s.jsx)(t.a,{href:"https://docs.rs/",children:"1"}),", ",(0,s.jsx)(t.a,{href:"https://crates.io/",children:"2"})]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://bandarra.me/2022/08/02/Play-Music-with-the-Raspberry-Pi-Pico-and-Rust/",children:"Example of how to play music using PWM"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.hackster.io/news/learn-how-to-use-pwm-to-generate-an-audio-signal-from-your-raspberry-pi-pico-00347dece8b8",children:"Audio output circuit example"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},90742:(e,t,i)=>{i.d(t,{A:()=>r});const r=i.p+"assets/images/arhitecture-712e2c645657f68e3088341ae002c896.png"},46722:(e,t,i)=>{i.d(t,{A:()=>r});const r=i.p+"assets/images/hardware_1-c9db7b63179ecfd16940758815cbe55a.jpg"},15949:(e,t,i)=>{i.d(t,{A:()=>r});const r=i.p+"assets/images/hardware_2-454ccce8b8ccc3bccf1fd38d598be8e8.jpg"},71056:(e,t,i)=>{i.d(t,{A:()=>r});const r=i.p+"assets/images/hardware_3-a80b8745a3567b6d289aa4d72e516bc3.jpg"},46524:(e,t,i)=>{i.d(t,{A:()=>r});const r=i.p+"assets/images/kicad-7802ca801a96b55d6b9a0a8bbb843b5a.png"},28453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>d});var r=i(96540);const s={},n=r.createContext(s);function a(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);