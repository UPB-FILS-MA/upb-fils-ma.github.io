"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[176],{63771:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"project/2024/ramona.nitu/index","title":"Morse Code Translator","description":"Interactive Text-to-Morse Translator with Multi-Sensory Feedback","source":"@site/versioned_docs/version-fils_en/project/2024/ramona.nitu/index.md","sourceDirName":"project/2024/ramona.nitu","slug":"/project/2024/ramona.nitu/","permalink":"/docs/fils_en/project/2024/ramona.nitu/","draft":false,"unlisted":false,"editUrl":"https://github.com/UPB-PMRust/upb-pmrust.github.io/edit/main/website/versioned_docs/version-fils_en/project/2024/ramona.nitu/index.md","tags":[],"version":"fils_en","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"RustFlower","permalink":"/docs/fils_en/project/2024/radu_costin.baccela/"},"next":{"title":"CyberSim","permalink":"/docs/fils_en/project/2024/rares.ionescu3004/"}}');var i=s(74848),n=s(28453);const o={},a="Morse Code Translator",d={},c=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Log",id:"log",level:2},{value:"Week 6 - 12 May",id:"week-6---12-may",level:3},{value:"Week 7 - 19 May",id:"week-7---19-may",level:3},{value:"Week 20 - 26 May",id:"week-20---26-may",level:3},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics",level:3},{value:"Bill of Materials",id:"bill-of-materials",level:3},{value:"Software",id:"software",level:2},{value:"Links",id:"links",level:2}];function h(e){const t={a:"a",admonition:"admonition",br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"morse-code-translator",children:"Morse Code Translator"})}),"\n",(0,i.jsx)(t.p,{children:"Interactive Text-to-Morse Translator with Multi-Sensory Feedback"}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.mdxAdmonitionTitle,{}),(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Author"}),": Ni\u021bu-S\u0103raru Ramona-Gabriela ",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"GitHub Project Link"}),": ",(0,i.jsx)(t.a,{href:"https://github.com/UPB-FILS-MA/project-GabrielaNitu",children:"https://github.com/UPB-FILS-MA/project-GabrielaNitu"})]})]}),"\n",(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(t.p,{children:"This project aims to seamlessly translate text input received from the server through Wi-Fi into Morse code, providing both visual and auditory feedback in real-time. Through the integration of an LCD screen, users can visually observe the Morse code representation of their text. Meanwhile, a buzzer emits distinct sounds for each Morse code symbol, allowing users to hear the translation simultaneously. Additionally, the RGB LED serves to provide visual feedback and indicate the status of the Morse code translation process, contributing to a more interactive and informative user experience."}),"\n",(0,i.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(t.p,{children:"I chose this project because of its relevance in various emergency aspects, such as search and rescue operations and communication in remote areas. Morse code remains a fundamental skill in these contexts, offering a reliable means of communication when other methods may be unavailable. Additionally, undertaking this project provides a valuable opportunity for personal learning and skill development. Mastering Morse code not only equips me with practical skills for emergency situations but also deepens my understanding of communication systems and encoding methods."}),"\n",(0,i.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Text Input Provided to the System: The user enters text input on a server, which is then transmitted through a Wi-Fi connection to the system. The input text is then passed to the Morse Code Translator for conversion."}),"\n",(0,i.jsx)(t.li,{children:"Morse Code Translator Converts Text into Morse Code Symbols: The Morse code translator receives the input text. It processes the text character by character, converting each character into its corresponding Morse code symbol. Special characters and spaces are also translated into their respective Morse code equivalents."}),"\n",(0,i.jsx)(t.li,{children:"Raspberry Pi Pico Controls the LCD Display, Buzzer, and RGB LED: The Raspberry Pi Pico receives the translated Morse code symbols from the Morse code translator. It controls the operation of the connected hardware components:\n-The Raspberry Pi Pico sends commands to the LCD display to update its content with the translated Morse code symbols.\n-Depending on the Morse code symbol being transmitted, the Raspberry Pi Pico activates the buzzer to emit corresponding sound signals.\n-The Raspberry Pi Pico sends signals to the RGB LED to change colors based on the Morse code symbols being transmitted, providing visual feedback.\nLCD Display Visually Represents the Morse Code Symbols:"}),"\n",(0,i.jsx)(t.li,{children:"The LCD display receives commands from the Raspberry Pi Pico to update its content. It visually represents the Morse code symbols in real-time, displaying them character by character as they are transmitted."}),"\n",(0,i.jsx)(t.li,{children:"Buzzer Emits Sound Signals Corresponding to Each Morse Code Symbol: The buzzer receives signals from the Raspberry Pi Pico to emit sound signals. Depending on the Morse code symbol being transmitted, the buzzer generates corresponding audio tones, providing auditory feedback."}),"\n",(0,i.jsx)(t.li,{children:"RGB LED Changes Colors to Provide Visual Feedback: The RGB LED receives signals from the Raspberry Pi Pico to change colors. It dynamically changes colors based on the Morse code symbols being transmitted, offering visual feedback for the translation process."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"architecture",src:s(43239).A+"",width:"1203",height:"447"})}),"\n",(0,i.jsx)(t.h2,{id:"log",children:"Log"}),"\n",(0,i.jsx)(t.h3,{id:"week-6---12-may",children:"Week 6 - 12 May"}),"\n",(0,i.jsx)(t.p,{children:"I temporarily assembled the hardware components on a breadboard for testing. I began by testing the code for each component individually to ensure they worked as expected. This step-by-step approach allowed me to troubleshoot and verify the functionality of each part before integrating them into the complete system."}),"\n",(0,i.jsx)(t.h3,{id:"week-7---19-may",children:"Week 7 - 19 May"}),"\n",(0,i.jsx)(t.p,{children:"I've successfully assembled all the components and created the KiCad schematics, ensuring to modify certain components to match the actual parts that I have."}),"\n",(0,i.jsx)(t.h3,{id:"week-20---26-may",children:"Week 20 - 26 May"}),"\n",(0,i.jsx)(t.p,{children:"I completely finished the software part of the project and added all the final details. Now, the Morse Code Translator is ready!"}),"\n",(0,i.jsx)(t.h2,{id:"hardware",children:"Hardware"}),"\n",(0,i.jsx)(t.p,{children:"Raspberry Pi Pico WH (Wireless+Headers) - This is the main microcontroller board for the project. It will handle the processing tasks, transmission via Wi-Fi, GPIO interfacing, and control of peripherals."}),"\n",(0,i.jsx)(t.p,{children:"Buzzer - An audio output device. It can produce sound signals corresponding to Morse code symbols when activated by the microcontroller."}),"\n",(0,i.jsx)(t.p,{children:"LCD 1602 with I2C interface - This is an LCD display module with a 16x2 character display. It will be used to visually display the translated Morse code text."}),"\n",(0,i.jsx)(t.p,{children:"Breadboard Kit (830 points) + Jumper Wires + Power Supply - The breadboard provides a platform for prototyping and connecting various components without soldering. Jumper wires will be used to make connections between components. The power supply ensures stable power for the circuit."}),"\n",(0,i.jsx)(t.p,{children:"RGB LED (Common Cathode) + 220\u03a9 Resistors - The RGB LED can emit different colors by combining the light emitted from its red, green, and blue components. It will be used for visual feedback and status indication. The resistors are used to limit the current flowing through the LED to prevent damage."}),"\n",(0,i.jsx)(t.p,{children:"USB Cable - Used to power the Raspberry Pi Pico and for communication with the laptop."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{alt:"Hardware1",src:s(77346).A+"",width:"1536",height:"2048"}),"\n",(0,i.jsx)(t.img,{alt:"Hardware2",src:s(35263).A+"",width:"1644",height:"2048"}),"\n",(0,i.jsx)(t.img,{alt:"Hardware3",src:s(16744).A+"",width:"1708",height:"2048"}),"\n",(0,i.jsx)(t.img,{alt:"Hardware4",src:s(24477).A+"",width:"1536",height:"2048"})]}),"\n",(0,i.jsx)(t.h3,{id:"schematics",children:"Schematics"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"KiCad_Schematics",src:s(18047).A+"",width:"1187",height:"846"})}),"\n",(0,i.jsx)(t.p,{children:"-RGB LED:\nThe common cathode of the RGB LED is connected to GND (pin 33).\nThe red cathode is connected to GP1 (pin 2) through a resistor.\nThe green cathode is connected to GP2 (pin 4) through a resistor.\nThe blue cathode is connected to GP4 (pin 6) through a resistor."}),"\n",(0,i.jsx)(t.p,{children:"-Buzzer:\nThe positive terminal of the buzzer is connected to GP7 (pin 10) of the Raspberry Pi Pico.\nThe negative terminal of the buzzer is connected to GND (pin 3)."}),"\n",(0,i.jsx)(t.p,{children:"-LCD 1602 + I2C Module:\nThe SCL (Serial Clock) of the I2C module is connected to GP21 (pin 27) of the Raspberry Pi Pico.\nThe SDA (Serial Data) of the I2C module is connected to GP20 (pin 26) of the Raspberry Pi Pico.\nThe VCC of the I2C module is connected to VBUS (pin 40) for power.\nThe GND of the I2C module is connected to GND (pin 38)."}),"\n",(0,i.jsx)(t.h3,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Device"}),(0,i.jsx)(t.th,{children:"Usage"}),(0,i.jsx)(t.th,{children:"Price"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html",children:"Rapspberry Pi Pico WH"})}),(0,i.jsx)(t.td,{children:"The microcontroller"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://ardushop.ro/ro/home/2819-raspberry-pi-pico-wh.html",children:"56 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://datasheet.octopart.com/BB830T-BusBoard-datasheet-10603672.pdf",children:"KIT Breadboard830 + jumper wires"})}),(0,i.jsx)(t.td,{children:"Main board + connectors"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://ardushop.ro/ro/electronica/163-kit-breadboard830-65xfire-jumper-sursa-alimentare-335v.html?search_query=kit+breadboard&results=171",children:"25 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://circuitdigest.com/article/16x2-lcd-display-module-pinout-datasheet",children:"LCD 1602 with I2C interface and blue backlight"})}),(0,i.jsx)(t.td,{children:"Display"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/optoelectronice-lcd-uri/2894-lcd-cu-interfata-i2c-si-backlight-albastru.html?search_query=lcd+1602+cu+i2c&results=4",children:"16 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://components101.com/misc/buzzer-pinout-working-datasheet",children:"Active Buzzer"})}),(0,i.jsx)(t.td,{children:"Audio output device"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/audio-buzzere/635-buzzer-activ-de-3-v.html?search_query=buzzer+activ&results=18",children:"2 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.arabsmakers.com/wp-content/uploads/2017/05/upload-5mm_RGB_led_common_cathode.pdf",children:"RGB LED with Common Cathode"})}),(0,i.jsx)(t.td,{children:"RGB LED"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://ardushop.ro/ro/electronica/271-led-tricolor-cu-catod-comun.html?search_query=led+rgb+cu+catod&results=1488",children:"3 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://digchip.com/datasheets/parts/datasheet/1838/CFR-25JB-220R.php",children:"220\u03a9 Resistors"})}),(0,i.jsx)(t.td,{children:"Resistors to limit the current flowing through the LED"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://ardushop.ro/ro/electronica/211-rezistenta-14w-1-buc.html?search_query=rezistor&results=43",children:"4 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.mouser.com/pdfdocs/HiroseZX62Datasheet24200011.pdf",children:"Micro USB"})}),(0,i.jsx)(t.td,{children:"USB used to power the Raspberry Pi Pico"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/cabluri-cabluri-usb/4576-cablu-albastru-micro-usb-50-cm.html?search_query=cablu+micro+usb&results=146",children:"3 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://greenchip.com.ua/23-0-204-2.html",children:'"Mother-father" jumpers'})}),(0,i.jsx)(t.td,{children:"Used to connect the LCD to Raspberry Pi Pico"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/ro/fire-fire-mufate/214-fire-colorate-mama-mama-10p.html?search_query=fire+mama+tata&results=37",children:"4 RON"})})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"software",children:"Software"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Library"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"Usage"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://docs.embassy.dev/embassy-rp/git/rp2040/index.html",children:"embassy-rp"})}),(0,i.jsx)(t.td,{children:"Peripheral access library"}),(0,i.jsx)(t.td,{children:"Used for initializing the peripherals"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-gpio"})}),(0,i.jsx)(t.td,{children:"GPIO management"}),(0,i.jsx)(t.td,{children:"Controls GPIO pins for devices and inputs"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://docs.rs/embassy-hal/latest/embassy_hal/",children:"embassy-hal"})}),(0,i.jsx)(t.td,{children:"Hardware Abstraction Layer"}),(0,i.jsx)(t.td,{children:"Interfaces with Raspberry Pi Pico W hardware"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://docs.embassy.dev/embassy-executor/git/std/index.html",children:"embassy-executor"})}),(0,i.jsx)(t.td,{children:"Asynchronous executor for Rust embedded systems"}),(0,i.jsx)(t.td,{children:"Used for task scheduling and asynchronous programming"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy_time"})}),(0,i.jsx)(t.td,{children:"For time-related functionality"}),(0,i.jsx)(t.td,{children:"Schedule tasks to run at specific times"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://crates.io/crates/embassy-net",children:"embassy-net"})}),(0,i.jsx)(t.td,{children:"Network stack"}),(0,i.jsx)(t.td,{children:"Manages network connections and tasks, such as DHCP and UDP communications"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://datasheets.raspberrypi.org/pico/raspberry-pi-pico-python-sdk.pdf",children:"pwm"})}),(0,i.jsx)(t.td,{children:"Pulse-width modulation"}),(0,i.jsx)(t.td,{children:"Used for controlling the buzzer's sound intensity"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/embassy-rs/cyw43",children:"cyw43"})}),(0,i.jsx)(t.td,{children:"Wi-Fi driver"}),(0,i.jsx)(t.td,{children:"Manages Wi-Fi connections and communication with the CYW43 Wi-Fi chip"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://docs.rs/ag-lcd/latest/ag_lcd/",children:"ag_lcd"})}),(0,i.jsx)(t.td,{children:"LCD display handling"}),(0,i.jsx)(t.td,{children:"Provides functionality to interface with and control an LCD display via I2C"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/rust-embedded/heapless",children:"heapless"})}),(0,i.jsx)(t.td,{children:"Data structures for embedded systems"}),(0,i.jsx)(t.td,{children:"Provides 'Vec' and 'String' types that do not rely on the standard library, suitable for no_std environments"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"links",children:"Links"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.youtube.com/watch?v=Ra924vY9Wa4",children:"Project Idea"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://www.arduino.cc/education/morse-code-project/",children:"Morse Implementation"}),"\n..."]}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},43239:(e,t,s)=>{s.d(t,{A:()=>r});const r=s.p+"assets/images/Architecture-b12fd25b7b09119da4317e20b986f4fd.png"},77346:(e,t,s)=>{s.d(t,{A:()=>r});const r=s.p+"assets/images/Hardware1-55364d48151071cdbc75858ec8448d8e.jpeg"},35263:(e,t,s)=>{s.d(t,{A:()=>r});const r=s.p+"assets/images/Hardware2-67c314d10d346378a350193b820ca46d.jpeg"},16744:(e,t,s)=>{s.d(t,{A:()=>r});const r=s.p+"assets/images/Hardware3-a4225397c8aad450f136046b0e062e7e.jpeg"},24477:(e,t,s)=>{s.d(t,{A:()=>r});const r=s.p+"assets/images/Hardware4-472e916a993712ad2e7c895b47b693fc.jpeg"},18047:(e,t,s)=>{s.d(t,{A:()=>r});const r=s.p+"assets/images/KiCad_Schematics-b62c04b964a9db700cb59d35d0bc2d32.png"},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var r=s(96540);const i={},n=r.createContext(i);function o(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);